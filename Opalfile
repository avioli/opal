# vim: filetype=ruby

# useful for inside header
require File.expand_path('../lib/opal/version', __FILE__)
require 'fileutils'

header = <<-HEAD
/*!
 * opal v#{Opal::VERSION}
 * http://opalscript.org
 *
 * Copyright 2011, Adam Beynon
 * Released under the MIT license
 */
HEAD

Opal::Bundle.new do |s|
  # name - this defaults to dir name, so can be skipped
  s.name    = 'opal'
  # default build is our opal.js file
  s.default = :opal

  # build mode used to build opal.js
  s.config :opal do
    s.out     = 'opal.js'
    s.header  = header
    s.builder do
      FileUtils.mkdir_p 'vm'
      parser = Opal::Parser.new
      code   = []
      order   = File.read('corelib/load_order').strip.split
      core    = order.map do |c|
        # we are actually sneaky here, and we build into corelib/ at the
        # same time to make the build tools a little faster to run.
        src = File.read "corelib/#{c}.rb"
        File.open("vm/#{c}.js", "w+") { |o| o.write parser.parse(src) }

        src
      end

      %w[pre runtime init class module fs loader vm string object array numeric hash error proc].each do |r|
        code << File.read("runtime/#{r}.js")
      end

      # Also write runtime.js into corelib/
      File.open("vm/runtime.js", "w+") do |o|
        o.write(code.join + File.read("runtime/post.js"))
      end

      code << "var core_lib = #{parser.parse core.join};"
      code << File.read("runtime/post.js")

      code.join
    end
  end # config :opal

  # build mode to build tests to opal.test.js
  s.config :test do
    s.out     = 'opal.test.js'
    s.runtime = true
    s.files   = Dir['spec/**/*.rb']
    s.header  = header
    s.main    = 'spec/spec_helper.rb'

    s.gem 'opaltest', git: 'git://github.com/adambeynon/opaltest.git'
  end
end

